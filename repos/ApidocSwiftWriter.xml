<MBML>
	<Var name="project:name" literal="ApidocSwiftWriter"/>
	<Var name="project:publisher" literal="Gilt Groupe"/>
	<Var name="repo:owner" literal="gilt"/>
	<Var name="project:creator:name" literal="Kyle Dorman"/>
	<Var name="project:license" literal="MIT"/>
	<Var name="project:bundlePrefix" literal="com.gilt.cleanroom"/>
	<Var name="project:language" literal="Swift"/>
	<Var name="project:grouping" literal="Cleanroom"/>

	<Var name="project:platforms" type="list">
		<Var literal="iOS"/>
		<Var literal="macOS"/>
		<Var literal="tvOS"/>
		<Var literal="watchOS"/>
	</Var>

	<Var name="project:description:formats" type="map">
		<Var name="text">ApidocSwiftWriter creates Swift source files for models, enums, and API calls for an apidoc.me application.</Var>
		<Var name="markdown">ApidocSwiftWriter creates Swift source files for models, enums, and API calls for an [`apidoc`](https://apidoc.me) application.</Var>
	</Var>

	<Var name="project:settings" type="map">
		<Var name="app-extension-only" boolean="T"/>
	</Var>

	<Var name="project:readme:preamble">^q(####) Why Code Generation?

[`apidoc`](https://apidoc.me) makes it easy for an API owner to define thier models and API endpoints in a JSON format. Because this JSON is in a repeatable format, its reasonable to off load the mundane task of creating models and API endpoints to a code generator, letting app builders focus on app middleware and presentation.</Var>

	<Var name="project:dependencies" type="list">
        <Var literal="CleanroomCLI"/>
        <Var literal="CleanroomDataTransactions"/>
        <Var literal="CleanroomLogger"/>
        <Var literal="SwiftPoet"/>
    </Var>
</MBML>
